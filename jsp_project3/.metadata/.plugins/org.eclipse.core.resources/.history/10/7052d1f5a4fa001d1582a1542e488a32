package controller;

import java.io.File;


import java.io.IOException;

import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.LikesList;
import domain.MemberVO;
import domain.PagingVO;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;
	private String destPage;
	private int isOk;
	private BoardService bsv;
	private String savePath; // imgfile 저장 경로
	private final String UTF8 = "utf-8"; // 인코딩 설정할때 사용 (편의용)

	public BoardController() {
		bsv = new BoardServiceImpl();
	}

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");

		String uri = request.getRequestURI();
		log.info(">>> uri : " + uri);
		String path = uri.substring(uri.lastIndexOf("/") + 1);
		log.info(">>> path : " + path);

		switch (path) {
		case "register":
			destPage = "/board/register.jsp";
			break;
		case "insert":
			try {
				// 파일을 저장할 물리적인 경로를 설정
				savePath = getServletContext().getRealPath("/_fileUpload"); // realPath : webapp
				log.info(">>> 파일 저장 경로 : "+savePath);
				File fileDir = new File(savePath);
				
				DiskFileItemFactory FIF = new DiskFileItemFactory();
				FIF.setRepository(fileDir); // 파일의 저장위치를 담고있는 객체를 저장
				FIF.setSizeThreshold(2*1024*1024); // 파일 저장을 위한 임시 메모리 용량 설정 : byte단위 2MB
				
				BoardVO bvo = new BoardVO();
				// multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 역할
				ServletFileUpload fileUpload = new ServletFileUpload(FIF);
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				log.info(">>> itemList : "+ itemList);
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "title":
						bvo.setTitle(item.getString(UTF8)); // 인코딩 형식을 담아서 변환
						break;
					case "writer":
						bvo.setWriter(item.getString(UTF8));
						break;
					case "post":
						bvo.setPost(item.getString(UTF8));
						break;
					case "imgfile":
						// 이미지가 있는지 없는지 체크
						log.info(">>> item 사이즈 : "+item.getSize());
						if(item.getSize() > 0) { // String 형식이 아니라서 사이즈로 이미지파일 유무 확인
							// getName : 경로를 포함한 파일이름 "/~/~/dog.jpg"
							String fileName = item.getName().substring(item.getName().lastIndexOf("/")+1); 
							fileName = System.currentTimeMillis()+"_"+fileName;
							log.info(">>> fileName : "+fileName);
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							log.info(">>> 실제 파일 경로 : "+ uploadFilePath);
							
							try {
								item.write(uploadFilePath); // path에 item을 저장
								bvo.setImgfile(fileName);
								
// 			-------------------------썸네일 작업--------------------------
								
								Thumbnails.of(uploadFilePath).size(75, 75).toFile(new File(fileDir+File.separator+"th_"+fileName));
								
							} catch (Exception e) {
								log.info(">>> file writer 실패");
								e.printStackTrace();
							}
						}
						break;
					}
				}
				isOk = bsv.insert(bvo);
				log.info(">>> isOk 값 : " + isOk);
				log.info(">>> 게시글 등록" + ((isOk > 0) ? "성공" : "실패"));
				
				
				
//				String title = request.getParameter("title");
//				String post = request.getParameter("post");
//				String writer = request.getParameter("writer");
//				BoardVO bvo = new BoardVO(title, writer, post);
//				isOk = bsv.insert(bvo);
//				log.info(">>> isOk 값 : " + isOk);
//				log.info(">>> 게시글 등록" + ((isOk > 0) ? "성공" : "실패"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/brd/page";
			break;
		case "list":
			try {
				List<BoardVO> board_list = bsv.list();
				request.setAttribute("list", board_list);
				log.info(">>> 리스트 출력" + (board_list == null ? "실패" : "성공"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/list.jsp";
			break;

		case "page":
			try {
				int pageNum = 1;
				int qty = 10;
				String type = "";
				String keyword = "";

				HttpSession ses = request.getSession();
				MemberVO mvo = (MemberVO) ses.getAttribute("ses");

				if (request.getParameter("pageNum") != null) { // 값이 없다면 limit 1,10으로 있다면 그 값으로 limit
					pageNum = Integer.parseInt(request.getParameter("pageNum"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				if (request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(">>> type : " + type + " keyword : " + keyword);
				}

				PagingVO pgvo = new PagingVO(pageNum, qty); // 이미 1,10 default로 설정되어있음
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(">>> pgvo : " + pgvo);
				int totalCount = bsv.getTotal(pgvo);
				log.info(">>>>총 개수 : " + totalCount);

				List<BoardVO> list = bsv.getPageList(pgvo); // limit를 이용한 select List를 호출(startPage, qty)
				log.info(">>>> 가져온 리스트 사이즈 : " + list.size());

				PagingHandler ph = new PagingHandler(pgvo, totalCount);
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info(">>>> 페이지 리스트 성공");

			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/list.jsp";
			break;

		case "post":
			try {
				HttpSession ses = request.getSession();
				MemberVO mvo = (MemberVO) ses.getAttribute("ses");
				if (mvo != null) {
					String sesID = mvo.getId();
					request.setAttribute("sesID", sesID);
				}

				int bnum = Integer.parseInt(request.getParameter("bnum"));
				BoardVO bvo = bsv.post(bnum);
				log.info(">>> 게시글 출력" + (bvo == null ? "실패" : "성공"));
				request.setAttribute("post", bvo);
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/post.jsp";
			break;

		case "modify":
			try {
				int bnum = Integer.parseInt(request.getParameter("bnum"));
				BoardVO bvo = bsv.post(bnum);
				request.setAttribute("post", bvo);
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/modify.jsp";
			break;

		case "edit":
			try {
				int bnum = Integer.parseInt(request.getParameter("bnum"));
				String title = request.getParameter("title");
				String post = request.getParameter("post");
				BoardVO bvo = new BoardVO(bnum, title, post);
				isOk = bsv.edit(bvo);
				log.info(">>> 게시글 수정" + ((isOk > 0) ? "성공" : "실패"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/brd/list";
			break;

		case "remove":
			try {
				int bnum = Integer.parseInt(request.getParameter("bnum"));
				isOk = bsv.remove(bnum);
				log.info(">>> 게시글 삭제" + ((isOk > 0) ? "성공" : "실패"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/brd/list";
			break;

		case "like":
			try {
				HttpSession ses = request.getSession();
				MemberVO mvo = (MemberVO) ses.getAttribute("ses");
				String id = mvo.getId();
				int bnum = Integer.parseInt(request.getParameter("bnum"));
				boolean value = Boolean.parseBoolean(request.getParameter("value"));
				LikesList ll = new LikesList(id, bnum, value);
				isOk = bsv.like(ll);
				log.info(">>> 게시글 추천" + ((isOk > 0) ? "성공" : "실패"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/brd/list";
			break;

		}

		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

}
